<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
    <!-- 引入annotaion -->
    <context:annotation-config/>
    <!--<context:mbean-export/>-->

    <!-- 指明annotation所作用的包的范围 -->
    <context:component-scan base-package="com.troyblog"/>

<!-- 获取本地-->
<bean id="localeResolver"
      class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver" />

<!-- spring自动配置DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter
这两个bean是spring为@Controller分发请求所必须的,效果等于下面注视的bean两者选其一建议使用mvc:annotation-driven-->
<mvc:annotation-driven/>
<!-- 配置springMVC的拦截器
<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />-->

<!-- spring先访问web。xml中默认的servlet，没有找到在访问controller -->
<mvc:default-servlet-handler/>

<!-- 为springMVC拦截器指定资源文件-->
<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources>

<!-- 视图解析器 -->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <!-- 前缀 /WEB-INF/jsp/-->
       <property name="prefix" value="/jsp/"></property>
       <!-- 后缀 -->
       <property name="suffix" value=".jsp"></property>
</bean>

<!-- 读取jdbc配置文件-->
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
       <property name="locations">
              <list>
                     <value>/WEB-INF/classes/jdbc.properties</value>
              </list>
       </property>
</bean>

<!-- 配置spring的jdbc数据源-->
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       <property name="driverClassName" value="${mysqlDriverClass}"></property>
       <property name="url" value="${url}"></property>
       <property name="username" value="${mysqluser}"></property>
       <property name="password" value="${mysqluserpwd}"></property>
</bean>

<!--
    配置sessionFactory
   使用hibernate4 要用org.springframework.orm.hibernate4.LocalSessionFactoryBean
   使用hibernate3要用org.springframework.orm.hibernate3.LocalSessionFactoryBean
-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
       <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.troyblog.Model.Entity</value>
            </list>
        </property>
       <property name="hibernateProperties">
              <props>
                  <prop key="hibernate.show_sql">true</prop>
                  <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                  <prop key="hibernate.id.new_generator_mappings">false</prop>
              </props>
       </property>
</bean>

<!-- springMVC 视图解析器获取文件用
<bean id="multipartResolver"
      class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
<!--1024*1024*100即100M
<property name="maxUploadSize" value="104857600" />
</bean>-->

<!-- 配置事务-->
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
       <property name="sessionFactory" ref="sessionFactory"></property>
</bean>
<tx:advice id="advices" transaction-manager="transactionManager">
      <tx:attributes>

          <!--设置事务传播级别:除了设置的以add、edit、remove、save、update、delete开头的使用事务;其他的都是用只读事务-->

              <tx:method name="add*" propagation="REQUIRED"/>
              <tx:method name="edit*" propagation="REQUIRED"/>
              <tx:method name="remove*" propagation="REQUIRED"/>
              <tx:method name="save*" propagation="REQUIRED"/>
              <tx:method name="update*" propagation="REQUIRED"/>
              <tx:method name="delete*" propagation="REQUIRED"/>
              <tx:method name="call*" propagation="REQUIRED"/>
              <tx:method name="*" read-only="true"/>
       </tx:attributes>
</tx:advice>
<aop:config>
    <!--
               (* com.swallretu.service.*.*(..))
               第一个 * :表示是任意返回值的方法包括,可以有返回值，也可以无返回值;
               com.swallretu.service.userDao.insert* :表示com.swallretu.service.userDao这个类中以insert开头的任意方法;
               com.swallretu.service.*.* :表示com.swallretu.service包底下任意类的任意方法;
                (..) :是任何参数的方法，也可以是没有参数的方法;
    -->
       <aop:pointcut expression="execution(* com.troyblog.service.*.*(..))" id="pointcut1" />
       <aop:advisor advice-ref="advices" pointcut-ref="pointcut1" />
</aop:config>
</beans>